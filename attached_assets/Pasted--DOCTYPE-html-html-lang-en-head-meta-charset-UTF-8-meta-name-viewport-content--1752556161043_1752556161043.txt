<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  <title>MCP Tool Interface</title>
  <style>
    :root {
      --primary-color: #007AFF;
      --primary-dark: #0056CC;
      --secondary-color: #5856D6;
      --success-color: #34C759;
      --error-color: #FF3B30;
      --warning-color: #FF9500;

```
  --background: #F2F2F7;
  --surface: rgba(255, 255, 255, 0.8);
  --surface-elevated: rgba(255, 255, 255, 0.95);
  --text-primary: #000000;
  --text-secondary: #6D6D80;
  --text-tertiary: #8E8E93;
  --border: rgba(60, 60, 67, 0.12);
  --shadow: rgba(0, 0, 0, 0.1);
  
  --border-radius: 12px;
  --border-radius-large: 20px;
  --spacing-xs: 8px;
  --spacing-sm: 12px;
  --spacing-md: 16px;
  --spacing-lg: 24px;
  --spacing-xl: 32px;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #000000;
    --surface: rgba(28, 28, 30, 0.8);
    --surface-elevated: rgba(44, 44, 46, 0.95);
    --text-primary: #FFFFFF;
    --text-secondary: #AEAEB2;
    --text-tertiary: #8E8E93;
    --border: rgba(84, 84, 88, 0.4);
    --shadow: rgba(0, 0, 0, 0.3);
  }
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", Roboto, sans-serif;
  background: var(--background);
  color: var(--text-primary);
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  min-height: 100vh;
  padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
}

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  max-width: 800px;
  margin: 0 auto;
  padding: var(--spacing-md);
  gap: var(--spacing-lg);
}

.header {
  text-align: center;
  padding: var(--spacing-lg) 0;
}

.header h1 {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: var(--spacing-xs);
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.header p {
  color: var(--text-secondary);
  font-size: 1rem;
  font-weight: 500;
}

.main-card {
  background: var(--surface-elevated);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border: 1px solid var(--border);
  border-radius: var(--border-radius-large);
  box-shadow: 0 20px 40px var(--shadow);
  overflow: hidden;
  flex: 1;
  display: flex;
  flex-direction: column;
}

.input-section {
  padding: var(--spacing-lg);
  border-bottom: 1px solid var(--border);
}

.input-group {
  position: relative;
  margin-bottom: var(--spacing-md);
}

.input-label {
  display: block;
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--text-secondary);
  margin-bottom: var(--spacing-xs);
}

.textarea-container {
  position: relative;
}

textarea {
  width: 100%;
  min-height: 120px;
  padding: var(--spacing-md);
  border: 1px solid var(--border);
  border-radius: var(--border-radius);
  background: var(--surface);
  color: var(--text-primary);
  font-family: inherit;
  font-size: 1rem;
  line-height: 1.5;
  resize: vertical;
  transition: all 0.2s ease;
  outline: none;
}

textarea:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
  transform: translateY(-1px);
}

.char-counter {
  position: absolute;
  bottom: var(--spacing-xs);
  right: var(--spacing-sm);
  font-size: 0.75rem;
  color: var(--text-tertiary);
  background: var(--surface);
  padding: 2px 6px;
  border-radius: 4px;
}

.button-group {
  display: flex;
  gap: var(--spacing-sm);
}

.btn {
  flex: 1;
  padding: var(--spacing-md) var(--spacing-lg);
  border: none;
  border-radius: var(--border-radius);
  font-family: inherit;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
  min-height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  outline: none;
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
  color: white;
  box-shadow: 0 4px 16px rgba(0, 122, 255, 0.3);
}

.btn-primary:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 6px 20px rgba(0, 122, 255, 0.4);
}

.btn-primary:active {
  transform: translateY(0);
}

.btn-secondary {
  background: var(--surface);
  color: var(--text-primary);
  border: 1px solid var(--border);
}

.btn-secondary:hover:not(:disabled) {
  background: var(--surface-elevated);
  transform: translateY(-1px);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
}

.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid transparent;
  border-top: 2px solid currentColor;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.output-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 300px;
}

.output-header {
  padding: var(--spacing-md) var(--spacing-lg);
  border-bottom: 1px solid var(--border);
  background: var(--surface);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.output-title {
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--text-secondary);
}

.copy-btn {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: none;
  border-radius: 6px;
  background: transparent;
  color: var(--primary-color);
  font-size: 0.75rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.copy-btn:hover {
  background: rgba(0, 122, 255, 0.1);
}

.output-content {
  flex: 1;
  padding: var(--spacing-lg);
  overflow-y: auto;
  background: var(--surface);
}

.output-placeholder {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: var(--text-tertiary);
  text-align: center;
  gap: var(--spacing-sm);
}

.output-placeholder-icon {
  width: 48px;
  height: 48px;
  opacity: 0.5;
}

.output-text {
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
  font-size: 0.875rem;
  line-height: 1.6;
  white-space: pre-wrap;
  word-break: break-word;
}

.status-indicator {
  display: inline-flex;
  align-items: center;
  gap: var(--spacing-xs);
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 600;
}

.status-success {
  background: rgba(52, 199, 89, 0.1);
  color: var(--success-color);
}

.status-error {
  background: rgba(255, 59, 48, 0.1);
  color: var(--error-color);
}

.status-loading {
  background: rgba(0, 122, 255, 0.1);
  color: var(--primary-color);
}

/* Responsive Design */
@media (max-width: 768px) {
  .app-container {
    padding: var(--spacing-sm);
    gap: var(--spacing-md);
  }

  .header h1 {
    font-size: 1.75rem;
  }

  .input-section, .output-content {
    padding: var(--spacing-md);
  }

  .button-group {
    flex-direction: column;
  }

  .btn {
    min-height: 52px;
  }
}

@media (max-width: 480px) {
  .header h1 {
    font-size: 1.5rem;
  }

  .input-section, .output-content {
    padding: var(--spacing-sm);
  }
}

/* Touch improvements */
@media (hover: none) and (pointer: coarse) {
  .btn:hover {
    transform: none;
  }
  
  .btn:active {
    transform: scale(0.98);
  }
}

/* Animation for smooth interactions */
.fade-in {
  animation: fadeIn 0.3s ease forwards;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.pulse {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}
```

  </style>
</head>
<body>
  <div class="app-container">
    <header class="header">
      <h1>MCP Tool Interface</h1>
      <p>Connect and interact with your Model Context Protocol tools</p>
    </header>

```
<main class="main-card">
  <section class="input-section">
    <div class="input-group">
      <label class="input-label" for="input">Your Message</label>
      <div class="textarea-container">
        <textarea 
          id="input" 
          placeholder="Enter your prompt, command, or question here..."
          maxlength="2000"
          oninput="updateCharCounter()"
        ></textarea>
        <div class="char-counter" id="charCounter">0 / 2000</div>
      </div>
    </div>
    
    <div class="button-group">
      <button class="btn btn-secondary" onclick="clearInput()" id="clearBtn">
        Clear
      </button>
      <button class="btn btn-primary" onclick="submit()" id="submitBtn">
        <span id="submitText">Send</span>
      </button>
    </div>
  </section>

  <section class="output-section">
    <div class="output-header">
      <span class="output-title">Response</span>
      <button class="copy-btn" onclick="copyOutput()" id="copyBtn" style="display: none;">
        Copy
      </button>
    </div>
    <div class="output-content" id="outputContent">
      <div class="output-placeholder" id="placeholder">
        <svg class="output-placeholder-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
        </svg>
        <p>Your response will appear here</p>
        <p style="font-size: 0.75rem; opacity: 0.7;">Start by typing a message above</p>
      </div>
    </div>
  </section>
</main>
```

  </div>

  <script>
    let isLoading = false;

    function updateCharCounter() {
      const input = document.getElementById('input');
      const counter = document.getElementById('charCounter');
      const length = input.value.length;
      counter.textContent = `${length} / 2000`;
      
      if (length > 1800) {
        counter.style.color = 'var(--error-color)';
      } else if (length > 1500) {
        counter.style.color = 'var(--warning-color)';
      } else {
        counter.style.color = 'var(--text-tertiary)';
      }
    }

    function clearInput() {
      document.getElementById('input').value = '';
      updateCharCounter();
      document.getElementById('input').focus();
    }

    function copyOutput() {
      const outputText = document.querySelector('.output-text')?.textContent;
      if (outputText) {
        navigator.clipboard.writeText(outputText).then(() => {
          const copyBtn = document.getElementById('copyBtn');
          const originalText = copyBtn.textContent;
          copyBtn.textContent = 'Copied!';
          copyBtn.style.color = 'var(--success-color)';
          setTimeout(() => {
            copyBtn.textContent = originalText;
            copyBtn.style.color = 'var(--primary-color)';
          }, 2000);
        }).catch(err => {
          console.error('Failed to copy text: ', err);
        });
      }
    }

    function setLoadingState(loading) {
      isLoading = loading;
      const submitBtn = document.getElementById('submitBtn');
      const submitText = document.getElementById('submitText');
      const clearBtn = document.getElementById('clearBtn');

      if (loading) {
        submitBtn.disabled = true;
        clearBtn.disabled = true;
        submitText.innerHTML = '<div class="loading-spinner"></div> Sending...';
      } else {
        submitBtn.disabled = false;
        clearBtn.disabled = false;
        submitText.textContent = 'Send';
      }
    }

    function showStatus(type, message) {
      const statusClass = `status-${type}`;
      const statusIndicator = `<div class="status-indicator ${statusClass}">${message}</div>`;
      return statusIndicator;
    }

    function displayOutput(content, isError = false) {
      const outputContent = document.getElementById('outputContent');
      const placeholder = document.getElementById('placeholder');
      const copyBtn = document.getElementById('copyBtn');

      if (placeholder) {
        placeholder.style.display = 'none';
      }

      const outputDiv = document.createElement('div');
      outputDiv.className = 'output-text fade-in';
      
      if (isError) {
        outputDiv.innerHTML = showStatus('error', 'Error') + '\n\n' + content;
        outputDiv.style.color = 'var(--error-color)';
      } else {
        outputDiv.innerHTML = showStatus('success', 'Success') + '\n\n' + content;
      }

      outputContent.innerHTML = '';
      outputContent.appendChild(outputDiv);
      copyBtn.style.display = 'block';
    }

    function displayLoading() {
      const outputContent = document.getElementById('outputContent');
      const placeholder = document.getElementById('placeholder');
      const copyBtn = document.getElementById('copyBtn');

      if (placeholder) {
        placeholder.style.display = 'none';
      }

      copyBtn.style.display = 'none';

      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'output-text fade-in';
      loadingDiv.innerHTML = showStatus('loading', 'Processing...') + '\n\nPlease wait while we process your request...';

      outputContent.innerHTML = '';
      outputContent.appendChild(loadingDiv);
    }

    async function submit() {
      if (isLoading) return;

      const input = document.getElementById('input').value.trim();
      
      if (!input) {
        displayOutput('Please enter a message before sending.', true);
        return;
      }

      setLoadingState(true);
      displayLoading();

      try {
        // Replace with your actual endpoint
        const response = await fetch("https://your-mcp.repl.co/tool-name", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ input })
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.text();
        displayOutput(data);
        
      } catch (error) {
        let errorMessage = error.message;
        
        if (error instanceof TypeError && error.message.includes('fetch')) {
          errorMessage = 'Network error: Please check your connection and try again.';
        }
        
        displayOutput(errorMessage, true);
      } finally {
        setLoadingState(false);
      }
    }

    // Keyboard shortcuts
    document.getElementById('input').addEventListener('keydown', function(e) {
      if (e.metaKey && e.key === 'Enter') {
        e.preventDefault();
        submit();
      }
    });

    // Initialize character counter
    updateCharCounter();

    // Add haptic feedback for iOS devices (if available)
    function addHapticFeedback(type = 'impact') {
      if (navigator.vibrate && /iPhone|iPad|iPod/.test(navigator.userAgent)) {
        navigator.vibrate(50);
      }
    }

    // Add haptic feedback to buttons
    document.querySelectorAll('.btn').forEach(btn => {
      btn.addEventListener('click', () => addHapticFeedback());
    });
  </script>

</body>
</html>